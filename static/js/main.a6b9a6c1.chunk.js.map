{"version":3,"sources":["images/profile-pic.jpg","components/actions/index.js","components/Header.js","components/reducers/loggedReducer.js","components/reducers/homePostReducer.js","components/reducers/loggedUserReducer.js","components/reducers/updateReducer.js","components/reducers/index.js","components/screens/CreatePost.js","components/Post.js","components/screens/Home.js","components/screens/Profile.js","components/screens/Login.js","components/screens/Signup.js","components/smallComponents/Comments.js","components/smallComponents/LikesFollowingFollowers.js","components/smallComponents/EditProfile.js","components/smallComponents/ProfilePhoto.js","components/Routing.js","App.js","index.js"],"names":["module","exports","set_loggedUser","data","type","payload","Header","isAuth","useSelector","state","isLogged","username","loggedUser","dispatch","useDispatch","history","useHistory","className","to","href","onClick","localStorage","clear","push","loggedReducer","action","homePostReducer","loggedUserReducer","updateReducer","allReducers","combineReducers","ishposts","isUpdate","CreatePost","useState","file","caption","url","post","setPost","send","setSend","image","setImage","x","y","width","crop","setCrop","onChangeHandler","event","target","name","value","prev","files","uri","URL","createObjectURL","useEffect","fetch","method","headers","getItem","body","JSON","stringify","then","resp","json","result","error","M","toast","html","classes","message","catch","err","console","log","onSubmit","e","preventDefault","FormData","append","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","height","getContext","drawImage","toDataURL","getCroppedImg","process","response","onImageLoaded","src","keepSelection","onChange","htmlFor","style","id","accept","required","marginLeft","autoFocus","autoComplete","maxLength","placeholder","marginTop","display","position","zIndex","bottom","right","Post","props","mydata","_id","postedBy","postedId","dp","likes","comments","comment","setComment","like","postId","er","handleFavPost","handleDelete","parentElement","handleShare","dataset","link","String","window","location","split","alert","data-username","marginBottom","padding","require","alt","Dropdown","init","open","data-target","onDoubleClick","isMobile","cursor","undefined","find","my","aria-hidden","data-id","favPosts","eachFav","length","paddingBottom","slice","map","each","key","by","Math","random","spellCheck","Home","useParams","posts","loaded","setLoaded","ReactDOM","unstable_batchedUpdates","getElementById","scrollIntoView","behavior","block","Profile","userData","setUserData","follow","setFollow","setFavPosts","count","user","handleFollow","fullname","followers","borderRadius","following","reverse","pathname","Login","setDisplay","email","password","formData","setFormData","handleFormData","prevSate","match","setItem","token","minLength","Signup","Comments","setComments","update","setUpdate","goBack","marginRight","LikesFollowingFollowers","userId","task","setData","margin","EditProfile","dispactch","handleData","handleSubmit","minHeight","ProfilePhoto","setFile","aspect","circularCrop","Routing","path","exact","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","App","render","StrictMode"],"mappings":"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","file":"static/js/main.a6b9a6c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile-pic.a04d849c.jpg\";","// The names of every action is self-expanatory except hPosts => homePosts\r\n\r\nexport const set_islogged = () => {\r\n    return {\r\n        type: 'set_logged_true'\r\n    }\r\n}\r\n\r\nexport const unset_islogged = () => {\r\n    return {\r\n        type: 'set_logged_false'\r\n    }\r\n}\r\n\r\nexport const set_hPosts = (data) => {\r\n    return {\r\n        type: 'SET_HPOSTS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const update_hPosts = (data) => {\r\n    return {\r\n        type: 'UPDATE_HPOSTS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const set_loggedUser = (data) => {\r\n    return {\r\n        type: 'set_loggedUser',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const unset_loggedUser = () => {\r\n    return {\r\n        type: 'unset_loggedUser',\r\n    }\r\n}\r\n\r\nexport const update_data = () => {\r\n    return {\r\n        type: 'update_data',\r\n    }\r\n}","import React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { unset_islogged, unset_loggedUser } from \"./actions/index\";\r\n\r\nconst Header = () => {\r\n\r\n    // isAuth is state for user to be logged in or not.\r\n    // dispatch and history are initialised for using them later to set state and redirect respectively.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    const { username } = useSelector(state => state.loggedUser) || \"username\";\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // Logout function to logout user\r\n    const logout = () => {\r\n        localStorage.clear();   // clear the localstorage and token for this domain.\r\n        dispatch(unset_islogged());   // set state to false // user logged out .\r\n        dispatch(unset_loggedUser());\r\n        history.push(\"/login\"); // redirect user to login page.\r\n    }\r\n\r\n    // naviagtion bar component and using isAuth to decide what link should redirect to what screens.\r\n    return (<nav className=\"white\">\r\n        <div className=\"nav-wrapper\">\r\n            <Link to={isAuth ? \"/\" : \"/login\"} className=\"brand-logo insta-font left\">Instagram</Link>\r\n            <ul className=\"right\">\r\n                {\r\n                    isAuth ? // after login links..\r\n                        <>\r\n                            <li><Link to=\"/\"><i className=\"fas fa-home-lg-alt\"></i></Link></li>\r\n                            <li><a href={`/user/${username}`}><i className=\"fas fa-2x fa-user-circle\"></i></a></li>\r\n                            <li onClick={logout}><Link to=\"\"><i className=\"fas fa-2x fa-sign-out-alt\"></i></Link></li>\r\n\r\n                        </>\r\n                        :   // before login links..\r\n                        <>\r\n                            <li><Link to=\"/login\"><i className=\"fas fa-2x fa-sign-in-alt\"></i></Link></li>\r\n                            <li><Link to=\"/signup\"><i className=\"fas fa-2x fa-user-plus\"></i></Link></li>\r\n                        </>\r\n                }\r\n\r\n\r\n\r\n            </ul>\r\n        </div>\r\n    </nav>)\r\n}\r\n\r\nexport default Header;","// This reducer will tell the app whether user is logged in or not.\r\nconst loggedReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'set_logged_true':\r\n            return true\r\n        case 'set_logged_false':\r\n            return false\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loggedReducer;","// set_hposts will set new data however update_hposts will update data in store.\r\nconst homePostReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SET_HPOSTS':\r\n            return [...action.payload]\r\n        case 'UPDATE_HPOSTS':\r\n            return [action.payload, ...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default homePostReducer;","// Here we set the details of logged user to state or delete it to logout them from system\r\nconst loggedUserReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case 'set_loggedUser':\r\n            return action.payload\r\n        case 'unset_loggedUser':\r\n            return null\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loggedUserReducer;","// this reducer just invert the state which we use to trigger useEffect to fetch new info at multiple place.\r\nconst updateReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'update_data':\r\n            return !state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default updateReducer;","import { combineReducers } from \"redux\";\r\nimport loggedReducer from \"./loggedReducer\";\r\nimport homePostReducer from \"./homePostReducer\";\r\nimport loggedUserReducer from \"./loggedUserReducer\";\r\nimport updateReducer from \"./updateReducer\";\r\n\r\nconst allReducers = combineReducers({\r\n    isLogged: loggedReducer,\r\n    ishposts: homePostReducer,\r\n    loggedUser: loggedUserReducer,\r\n    isUpdate: updateReducer\r\n})\r\n\r\nexport default allReducers;","import React, { useState, useEffect } from 'react';\r\nimport M from \"materialize-css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { update_hPosts } from '../actions';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\n// Create Post Component..\r\nconst CreatePost = () => {\r\n    // global redux store state..\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    const dispatch = useDispatch();\r\n    const [post, setPost] = useState({\r\n        file: null,\r\n        caption: \"\",\r\n        url: \"\"\r\n    });\r\n    // using this local state to trigger send in useState..\r\n    const [send, setSend] = useState(false);\r\n    const { file, caption, url } = post;\r\n    // local states..\r\n    const [image, setImage] = useState(null);\r\n    const [crop, setCrop] = useState({ x: 0, y: 30, width: 100 });\r\n\r\n    // This function is provided by the ReactCrop component to process image\r\n    function getCroppedImg(image, crop) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height,\r\n        );\r\n        return canvas.toDataURL('image/png');\r\n    }\r\n\r\n    // Form on change event handler\r\n    const onChangeHandler = event => {\r\n        if (event.target.name === \"caption\") {  // checking if the event is triggered by caption input\r\n            const caption = event.target.value;\r\n            setPost(prev => {\r\n                return { ...prev, caption }\r\n            });\r\n        } else { // else its a file input change event\r\n            if (event.target.files[0]) {\r\n                const uri = event.target.files[0];\r\n                const file = URL.createObjectURL(event.target.files[0]);\r\n                setPost(prev => {\r\n                    return { ...prev, file: file, url: uri }\r\n                });\r\n            } else {\r\n                setPost({ caption: \"\", url: \"\", file: null });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // File upload to cloudinary api....\r\n    const handleForm = e => {\r\n        e.preventDefault();\r\n        const data = new FormData();\r\n        data.append(\"file\", getCroppedImg(image, crop));\r\n        data.append(\"upload_preset\", `${process.env.REACT_APP_upload_preset}`);\r\n        data.append(\"cloud_name\", `${process.env.REACT_APP_cloud_name}`);\r\n        fetch(`${process.env.REACT_APP_IMAGE_API}`, {\r\n            method: \"post\",\r\n            body: data\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setPost(prev => { return { ...prev, url: data.url } })\r\n                setSend(prev => !prev)  // here we trigger the useSate to send post data..\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        // first trigger doesnt do anything but then it send only when triggered by the send satate change..\r\n        if (send) {\r\n            fetch(\"/createpost\", {\r\n                method: \"post\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n                },\r\n                body: JSON.stringify({\r\n                    url: url,\r\n                    caption: caption\r\n                })\r\n            })\r\n                .then(resp => resp.json())\r\n                .then(result => {\r\n                    dispatch(update_hPosts(result.post))\r\n                    if (result.error) {\r\n                        M.toast({ html: result.error, classes: \"red darken-1\" })\r\n                    }\r\n                    else {\r\n                        setPost({ caption: \"\", url: \"\", file: null })\r\n                        M.toast({ html: result.message, classes: \"blue darken-1\" })\r\n                    }\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [send])\r\n\r\n    return (<>\r\n\r\n        {  // here only shows the form and image data based on file selected..\r\n            isAuth && (\r\n                file ? // display the selected image file and form to home screen\r\n                    <form method=\"post\" className=\"card-home card\" onSubmit={handleForm}>\r\n                        <i onClick={() => setPost({ caption: \"\", url: \"\", file: null })} className=\"fas fa-times fa-2x right\"></i>\r\n                        <div >\r\n                            <ReactCrop width=\"100%\" onImageLoaded={setImage} src={file} crop={crop} keepSelection=\"true\" onChange={setCrop} />\r\n                        </div>\r\n                        <label htmlFor=\"file-input\">\r\n                            {/* <img src={file} alt=\"img\"  /> */}\r\n                        </label>\r\n                        <input style={{ \"display\": \"none\" }} id=\"file-input\" type=\"file\" accept=\"image/png, image/jpeg\" files={file} onChange={onChangeHandler} />\r\n                        <div className=\"post-top-part post-comments\">\r\n                            <input required={true} style={{ marginLeft: \"1rem\" }} value={caption} onChange={onChangeHandler} autoFocus=\"on\" className=\"comment-add\" autoComplete=\"off\" type=\"text\" name=\"caption\" id=\"input_text\" maxLength=\"100\" placeholder=\"Add a caption\" />\r\n                            <button style={{ marginTop: \"-0.5rem\" }} className=\"blue white-text darken-1 post-comment-username\"> Post </button>\r\n                        </div>\r\n                    </form>\r\n                    :   // else display the floating button to add new post..\r\n                    <div>\r\n                        <label htmlFor=\"file-input\">\r\n                            <div style={{ display: \"absolute\", position: \"fixed\", zIndex: 8, bottom: 10, right: 20 }}>\r\n                                <span className=\"btn-floating btn-large red\"><i className=\"fas fa-plus\"></i></span>\r\n                            </div>\r\n                        </label>\r\n                        <input style={{ \"display\": \"none\" }} id=\"file-input\" type=\"file\" accept=\"image/png, image/jpeg\" files={file} onChange={onChangeHandler} />\r\n                    </div>)\r\n\r\n        }\r\n    </>\r\n    )\r\n}\r\n\r\nexport default CreatePost;","import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { update_data } from \"../components/actions\";\r\nimport isMobile from \"react-device-detect\";\r\nimport { Link } from \"react-router-dom\";\r\nimport M from \"materialize-css\";\r\n\r\nconst Post = (props) => {\r\n    const mydata = useSelector(state => state.loggedUser);\r\n    const dispatch = useDispatch();\r\n    // Destructuring the post info into apropriate labels then use them accordingly...\r\n    const { url, caption, _id: id, postedBy: { _id: postedId, username, dp }, likes, comments } = props.post;\r\n    // stste management for comment form field\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    // like button functionality..\r\n    const like = () => {\r\n        fetch(\"/like\", {\r\n            method: \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({ postId: id })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => dispatch(update_data()))\r\n            .catch(er => console.log(er));\r\n    }\r\n\r\n    const handleFavPost = () => {\r\n        fetch(\"/post/favPost\", {\r\n            method: \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({ postId: id })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => dispatch(update_data()))\r\n            .catch(er => console.log(er));\r\n    }\r\n\r\n\r\n\r\n    // post comment function..\r\n    const postcomment = e => {\r\n        e.preventDefault();\r\n        fetch(\"/postcomment\", {\r\n            method: \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({ postId: id, comment })\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => dispatch(update_data()))\r\n            .catch(er => console.log(er));\r\n        setComment(\"\");\r\n    }\r\n\r\n    // controlled input form\r\n    const handleComment = e => {\r\n        const value = e.target.value;\r\n        setComment(value);\r\n    }\r\n\r\n    const handleDelete = e => {\r\n        const id = e.target.parentElement.parentElement.parentElement.id;\r\n        // if (!confirm(\"Do you really want to delete this post ?\")) return;\r\n        if (username === mydata.username) {\r\n            fetch(`/${id}/delete`, {\r\n                method: 'get',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': \"Bearer \" + localStorage.getItem('jwt')\r\n                }\r\n            })\r\n                .then(result => result.json())\r\n                .then(result => dispatch(update_data()))\r\n                .catch(er => console.log(er))\r\n        }\r\n    }\r\n\r\n    const handleShare = e => {\r\n        const id = e.target.parentElement.parentElement.parentElement.id;\r\n        const username = e.target.parentElement.parentElement.parentElement.dataset.username;\r\n        let link = String(window.location).split('/', 3);\r\n        alert(`Share with your friends -> ${link[0]}//${link[2]}/${username}/${id}`);\r\n    }\r\n\r\n    /*\r\n    card-home is class overriden of class card which belongs to Materialize-css\r\n    post-top-part = Top part/bottom part of post component where we see user pic, username who posted post along with more buttons like heart, comment,etc.\r\n    image-card => class is from materialize-css\r\n    post-like-part -> Small profile img of current username.\r\n    post-liked-username  -> People who liked the post ( their names, etc..)\r\n    post-comments  -> its a small flex box with 2 elements only and has been used numerous times for different purposes.\r\n    */\r\n    return (\r\n        <div id={id} data-username={postedId} className=\"card card-home\" style={{ marginBottom: \"1rem\", padding: \"0.3rem\" }}>\r\n            <div className=\"post-top-part\">\r\n                <Link to={`/user/${username}`}><img style={{ marginTop: '0.5rem' }} className=\"post-profile-pic\" width=\"40\" height=\"40\" src={dp || require('../images/profile-pic.jpg')} alt=\"profile pic\" /></Link>\r\n                <h6 className=\"post-username\"><strong><Link to={`/user/${username}`}>{username}</Link></strong></h6>\r\n                {\r\n                    username === mydata.username ?\r\n                        <i onClick={(e) => M.Dropdown.init(e.target).open()} data-target='dropdown1' style={{ padding: '0.5rem 1rem' }} className=\"post-top-more fas fa-ellipsis-h\"></i>\r\n                        :\r\n                        <i onClick={(e) => M.Dropdown.init(e.target).open()} data-target='dropdown2' style={{ padding: '0.5rem 1rem' }} className=\"post-top-more fas fa-ellipsis-h\"></i>\r\n                }\r\n                {\r\n                    username === mydata.username ?\r\n                        <ul id='dropdown1' className='dropdown-content'>\r\n                            <li className=\"dropdown-options\" onClick={handleDelete}>Delete</li>\r\n                            <li className=\"dropdown-options\" onClick={handleShare}>Share</li>\r\n                        </ul>\r\n                        :\r\n                        <ul id='dropdown2' className='dropdown-content'>\r\n                            <li className=\"dropdown-options\" onClick={handleShare}>Share</li>\r\n                        </ul>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"image-card center\">\r\n                <img onDoubleClick={like} style={isMobile && { cursor: 'pointer' }} src={url} alt=\"img\" width=\"100%\" />\r\n            </div>\r\n\r\n            <div className=\"post-top-part\">\r\n                {\r\n                    // Checking whether the current user liked the post or not to display heart in red or white color\r\n                    likes.find(my => my.username === mydata.username) === undefined ?\r\n                        <i onClick={like} className=\"far fa-heart fa-2x\"></i> :\r\n                        <i onClick={like} className=\"fa red-text fa-heart fa-2x\" aria-hidden=\"true\"></i>\r\n                }\r\n                <Link to={`/${id}/comments`}><i className=\"far fa-comment fa-2x\"></i></Link>\r\n                <i data-id={props.postId} onClick={handleDelete} className=\"fab fa-telegram-plane fa-2x\"></i>\r\n                {\r\n                    mydata.favPosts.find(eachFav => eachFav === id) === undefined ? <i onClick={handleFavPost} className=\"far fa-bookmark fa-2x\"></i> :\r\n                        <i onClick={handleFavPost} className=\"fas fa-bookmark fa-2x\"></i>\r\n                }\r\n            </div>\r\n            <div className=\"post-top-part post-like-part\">\r\n                <span style={{ marginLeft: \"1rem\" }}></span>\r\n                <h6 className=\"post-liked-username\">\r\n                    {\r\n                        // Liked by bla bla and others ... conditions\r\n                        likes.length === 0 ? null : (likes.length === 1 ? <>Liked by <Link to={`/user/${likes[0].username}`} ><strong>{likes[0].username}</strong></Link></> : likes.length === 2 ? <>Liked by <Link to={`/user/${likes[0].username}`} ><strong>{likes[0].username}</strong></Link> and <Link to={`/user/${likes[1].username}`} ><strong>{likes[1].username}</strong></Link></> : <>Liked by <Link to={`/user/${likes[0].username}`} ><strong>{likes[0].username}</strong></Link> and <Link to={`/user/${likes[1].username}`} ></Link> <Link to={`/${id}/likes`} ><strong>{likes.length - 1} others</strong></Link></>)\r\n                    }</h6>\r\n            </div>\r\n            {\r\n                // caption and username // kind of comment but part of post\r\n            }\r\n            <div className=\"post-top-part post-comments\">\r\n                <h6 className=\"post-comment-username\" style={{ paddingBottom: '0.2rem' }}><Link to={`/user/${username}`}><strong>{username}</strong></Link></h6>\r\n                <h6 className=\"comment\">{caption}</h6>\r\n            </div>\r\n            {\r\n                // slicing the comments to extract latest 2 comments only to display\r\n                comments.slice(-1, comments.length).map(each => {\r\n                    // using random to generate a random key for each comment\r\n                    return <div key={each.by._id + Math.random()} className=\"post-top-part post-comments\">\r\n                        <h6 className=\"post-comment-username\" style={{ paddingBottom: '0.2rem' }}> <Link to={`/user/${each.by.username}`}><strong>{each.by.username}</strong></Link></h6>\r\n                        <h6 className=\"comment\">{each.comment} </h6>\r\n                    </div>\r\n                })\r\n            }\r\n            {\r\n                // text only displayed if there are more than 1 comment or atleast 2..\r\n                comments.length > 1 && <div style={{ marginLeft: '1rem' }}><Link to={`/${id}/comments`}><strong>View all comments.</strong></Link></div>\r\n            }\r\n            <div className=\"post-top-part post-comments\">\r\n                <img className=\"post-profile-pic\" width=\"18\" height=\"18\" src={mydata.dp || require('../images/profile-pic.jpg')} alt=\"profile pic\" />\r\n                <form className=\"comment-add\" onSubmit={postcomment}>\r\n                    <input className=\"comment-add\" placeholder=\"Add a comment\"\r\n                        type=\"text\" name=\"comment\" value={comment} onChange={handleComment} autoComplete=\"off\" spellCheck={false} />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, { useEffect, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport CreatePost from \"./CreatePost\"\r\nimport Post from \"../Post\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { set_hPosts } from \"../actions\";\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const { id, postId } = useParams();\r\n    //isAuth and posts are two states stored in redux store\r\n    // isAuth tells whether user is logged in or not.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    const isUpdate = useSelector(state => state.isUpdate);\r\n    // posts conatin aray of posts objects to display  posts on home page.\r\n    const posts = useSelector(state => state.ishposts);\r\n    // loaded state is useed to trigger useEffect after fetch api is loaded and render takes place.\r\n    const [loaded, setLoaded] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            // // Using ReactDOM.unstable_batchedUpdates to batch the fetch and sts\r\n            ReactDOM.unstable_batchedUpdates(() => {\r\n                // If id is recieved as useParams prop then fetch specific user posts else if postId is recieved then fetch myCollection else home page fetch.\r\n                fetch((id) ? `/user/${id}/posts` : (postId) ? '/myCollections' : '/allposts', {\r\n                    method: (id) ? \"post\" : \"get\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n                    }\r\n                })\r\n                    .then(resp => resp.json())\r\n                    .then(resp => {\r\n                        if (!resp.error && resp.posts.length > 0) {\r\n                            dispatch(set_hPosts(resp.posts));\r\n                            if (!loaded) {\r\n                                setLoaded(true);\r\n                            }\r\n                        } else {\r\n                            history.push('/');  //if selected collection or userposts are 0 then display home route.\r\n                        }\r\n\r\n                    })\r\n                    .catch(er => console.log(er))\r\n            })\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [isAuth, isUpdate, id, postId]);         // its dependencies\r\n\r\n    useEffect(() => {\r\n        // This useEffect will run only when loading is completed and will move the view to the selected div/post \r\n        if (postId && loaded && posts.find(post => post._id === postId)) {\r\n            document.getElementById(postId).scrollIntoView({ behavior: \"smooth\", block: \"start\" })\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loaded]);\r\n\r\n    return (\r\n        <div className=\"home card-home\">\r\n            {\r\n                isAuth &&\r\n                posts && // Only display the block if user is logged in and post array has data from fetch API.\r\n                <div style={{ position: \"relative\" }}>\r\n                    {(!id && !postId) && <CreatePost />}\r\n                    { // Mapping through the post state array to display all the posts on Page.\r\n                        posts.map(post => {\r\n                            return <Post id={post._id} key={post._id} postId={post._id} post={post} />\r\n                        })\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Profile = () => {\r\n    const { username } = useParams();\r\n    const history = useHistory();\r\n    // isAuth to verify if user is already logged in or not.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    // logged user will get logged user info from store.\r\n    const loggedUser = useSelector(state => state.loggedUser);\r\n    // local states for handling profile data.\r\n    const [userData, setUserData] = useState(null);\r\n    // local state to trigger useEffect after follow or unfollow a user\r\n    const [follow, setFollow] = useState(false);\r\n    //local state to triger  useEffect to fetch different data.\r\n    const [favPosts, setFavPosts] = useState(false);\r\n    // a counter to put in as a uniue key for map array.\r\n    let count = 0;\r\n\r\n    useEffect(() => {\r\n        // Fetch my favposts or myposts depending on the  favPosts state.\r\n        fetch((favPosts) ? `/retrieve/favposts` : `/user/${username}`, {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        })\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                if (result.user) {\r\n                    setUserData(result.user);\r\n                }\r\n                else {\r\n                    history.push('/');\r\n                }\r\n            })\r\n            .catch(er => console.log(er))\r\n        //eslint-disable-next-line\r\n    }, [follow, favPosts])\r\n\r\n\r\n    const handleFollow = () => {\r\n        // Handle follow/unfollow requests\r\n        fetch(`/user/${username}/follow`, {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        })\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                if (!result.error) {\r\n                    // triggers useEffect to re-render updated view.\r\n                    setFollow(prev => !prev);\r\n                }\r\n            })\r\n            .catch(er => console.log(er))\r\n    }\r\n    return (\r\n        isAuth && userData ?\r\n            <div className=\"profile card-home home\">\r\n                {/* Top part with user dp & username */}\r\n                <div className=\"profile-info row\">\r\n                    <div className=\"col s4 left\">\r\n                        <img className=\"profile-img\" src={userData.dp || require('../../images/profile-pic.jpg')} alt=\"profile-img\" />\r\n                    </div>\r\n                    <div className=\"col s8 profile-data\">\r\n                        <div className={\"profile-flex\"} >\r\n                            <span className=\"username profile-flex-item\">{username}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/* Prinitng full name of user */}\r\n                <span className=\"full-name\"><strong>{userData.fullname}</strong></span><br /><br />\r\n                {\r\n                    /* if its logged user's own profile then display follow & unfollow button else edit profile and show fav/mypost buttons. */\r\n                    (userData._id !== loggedUser._id) ? (userData.followers.find(id => id === loggedUser._id) ?\r\n                        < div onClick={handleFollow} className=\"btn grey\" style={{ width: '100%', borderRadius: '0.3rem' }}><strong className=\"white-text\">Unfollow</strong></div>\r\n                        :\r\n                        < div onClick={handleFollow} className=\"btn blue\" style={{ width: '100%', borderRadius: '0.3rem' }}><strong className=\"white-text\">Follow</strong></div>)\r\n                        :\r\n                        <div>\r\n                            <Link to=\"/profile/edit\" >< div className=\"btn black\" style={{ width: '48%', marginLeft: '2%', borderRadius: '0.3rem' }}><strong className=\"white-text\">Edit Profile</strong></div></Link>\r\n                            {(favPosts) ? < div className=\"btn black\" onClick={() => setFavPosts(false)} style={{ width: '48%', marginLeft: '2%', borderRadius: '0.3rem' }}><strong className=\"white-text\">Show My Posts</strong></div> :\r\n                                < div className=\"btn black\" onClick={() => setFavPosts(true)} style={{ width: '48%', marginLeft: '2%', borderRadius: '0.3rem' }}><strong className=\"white-text\">Show Favourites</strong></div>}\r\n                        </div>\r\n                }\r\n                <hr className=\"hr-profile\" />\r\n                {/* Display of number of posts, followers, followings for the user */}\r\n                <div className=\"row center\">\r\n                    <span className=\"col s4\"><strong>{userData.posts.length}</strong><br />posts</span>\r\n                    <Link to={`/followering/${userData._id}/followers`}><span className=\"col s4\"><strong>{userData.followers.length}</strong><br />followers</span></Link>\r\n                    <Link to={`/followering/${userData._id}/following`}><span className=\"col s4\"><strong>{userData.following.length}</strong><br />following</span></Link>\r\n                </div>\r\n                <hr className=\"hr-profile\" />\r\n                {/* display favposts or myposts depending on the state of favPosts */}\r\n                <div className=\"my-posts\">\r\n                    {\r\n                        (favPosts) ?\r\n                            userData.favPosts.slice(0).reverse().map(post => <Link key={++count} to={{ pathname: `/myCollection/${post._id}` }}><img style={{ width: '100%', height: '8rem' }} src={post.url} alt=\"posts\" /></Link>)\r\n                            :\r\n                            userData.posts.slice(0).reverse().map(post => <Link key={++count} to={{ pathname: `/${userData._id}/${post._id}` }}><img style={{ width: '100%', height: '8rem' }} src={post.url} alt=\"posts\" /></Link>)\r\n                    }\r\n                </div>\r\n            </div>\r\n            :\r\n            null\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport M from \"materialize-css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { set_islogged, set_loggedUser } from \"../actions\";\r\n\r\nconst Login = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    // isAuth to verify if user is already logged in or not.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    // local state to decide wether to display login page or not\r\n    const [display, setDisplay] = useState(null);\r\n    // usestate hook that contains object which carry email and passsword values.\r\n    const [formData, setFormData] = useState({ email: \"\", password: \"\" });\r\n    // Destructuring values from formData object.\r\n    const { email, password } = formData;\r\n\r\n    // Whenever any form elemnet values changes handleFormData is called and make appropriate changes to state.\r\n    // Controlled form elements.\r\n    const handleFormData = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        setFormData(prevSate => {\r\n            return { ...prevSate, [name]: value } // destructring the prev state and adding new at the end to overwite the changes.\r\n        })\r\n    }\r\n\r\n    // Handle Login form data and make a request to server to login user.\r\n    const handleLogin = e => {\r\n        e.preventDefault();\r\n        // eslint-disable-next-line\r\n        if (email.match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\r\n            && password.length > 3) {\r\n            // Chaecking whether the email and password is valid or not\r\n            // Anyways server will validaes the data too..\r\n\r\n            fetch(\"/signin\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email,\r\n                    password\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.error) {\r\n                        // If data json response does conatin a error property then notify user with a toast.\r\n                        M.toast({ html: data.error, classes: \"red darken-1\" })\r\n                    } else {\r\n                        // clear form\r\n                        setFormData({ email: \"\", password: \"\" })\r\n                        // Saving token and user data in localStorage\r\n                        localStorage.setItem(\"jwt\", data.token)\r\n                        dispatch(set_loggedUser(data.user))\r\n                        dispatch(set_islogged());\r\n                        // Redirect user to Home page.. \r\n                        history.push(\"/\");\r\n                        // Send a toast to user regarding successfull Login..\r\n                        M.toast({ html: data.message, classes: \"blue darken-1\" })\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else {\r\n            // if the fields are invalid then send this toast instead.\r\n            M.toast({ html: \"Invalid email or other fields<br>Please check your inputs again.\", classes: \"red darken-1\" })\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            history.push(\"/\");\r\n        }\r\n        else {\r\n            setDisplay(true);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [isAuth]);\r\n\r\n\r\n\r\n    return (\r\n\r\n        display && <>\r\n            <form method=\"post\" className=\"card card-login\" onSubmit={handleLogin}>\r\n                <h2 className=\"insta-font\">Instagram</h2>\r\n                <input type=\"email\" autoComplete=\"off\"\r\n                    name=\"email\" placeholder=\"Email\" required\r\n                    value={email} onChange={handleFormData} />\r\n                <input type=\"password\" name=\"password\" required minLength=\"4\"\r\n                    placeholder=\"Password\" value={password} onChange={handleFormData} />\r\n                <br />\r\n                <button className=\"btn blue insta-btn\">\r\n                    Log In\r\n            </button>\r\n                <div className=\"or-container\">\r\n                    <hr />OR<hr />\r\n                </div>\r\n                <br />\r\n                <Link className=\"blue-text  text-darken-4\" to=\"/Login\">forgot password ?</Link>\r\n            </form>\r\n            <div className=\"card card-login signup-card\">\r\n                Don't have an account? <Link className=\"blue-text\" to=\"/Signup\"> Sign up</Link>\r\n            </div>\r\n            <div className=\"card card-login signup-card app-card\">\r\n                <div> Get the app </div><br />\r\n                <div>\r\n                    <button className=\"btn black\">\r\n                        <i className=\"fab fa-google-play\"> </i> Google Play\r\n                    </button>\r\n                    {\r\n                        isMobile ? <span><br /><br /></span> : <span>  </span>\r\n                    }\r\n                    <button className=\"btn black\">\r\n                        <i className=\"fab fa-app-store\"> </i> App Store<i className=\"text-transparent\">ss</i>\r\n                    </button></div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { isMobile } from \"react-device-detect\";\r\nimport M from \"materialize-css\";\r\n\r\n\r\nconst Signup = () => {\r\n    const history = useHistory();\r\n    // formdata is state which has object with different key-pairs.\r\n    const [formData, setFormData] = useState({ email: \"\", username: \"\", password: \"\", fullname: \"\" });\r\n    // Destructuring the formaData into required lables/variables to make it little easy to work with these.\r\n    const { email, password, fullname, username } = formData;\r\n\r\n    // Whenever any form elemnet values changes handleFormData is called and make appropriate changes to state.\r\n    // Controlled form elements.\r\n    const handleFormData = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        setFormData(prevSate => {\r\n            return { ...prevSate, [name]: value }  // destructring the prev state and adding new at the end to overwite the changes.\r\n        })\r\n    }\r\n\r\n    // Handle Signup form data and make a request to server to signup new user.\r\n    const handleSignup = e => {\r\n        e.preventDefault();\r\n        // eslint-disable-next-line\r\n        if (email.match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\r\n            && fullname.length > 3 && username.length > 3 && password.length > 3) {\r\n            // Chaecking whether the email and other data is valid or not\r\n            // Anyways server will validaes the data too..\r\n\r\n            fetch(\"/signup\", {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    email,\r\n                    fullname,\r\n                    password,\r\n                    username\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (data.error) {\r\n                        // If data json response does conatin a error property then notify user with a toast.\r\n                        M.toast({ html: data.error, classes: \"red darken-1\" })\r\n                    } else {\r\n                        // clear form // redirect user to login page.. // send a toast to user regarding successfull signup..\r\n                        setFormData({ email: \"\", username: \"\", password: \"\", fullname: \"\" })\r\n                        history.push(\"/login\");\r\n                        M.toast({ html: data.message, classes: \"blue darken-1\" })\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        } else {\r\n            // if the fields are invalid then send this toast instead.\r\n            M.toast({ html: \"Invalid email or other fields<br>Please check your inputs again.\", classes: \"red darken-1\" })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form method=\"post\" className=\"card card-login\" onSubmit={handleSignup}>\r\n                <h2 className=\"insta-font\">Instagram</h2>\r\n                <h5 className=\"grey-text  text-darken-1\">Sign up to see photos and videos from your friends.</h5>\r\n                <input type=\"email\" autoComplete=\"off\"\r\n                    name=\"email\" placeholder=\"Email\" required\r\n                    value={email} onChange={handleFormData} />\r\n                <input type=\"text\" autoComplete=\"off\"\r\n                    name=\"fullname\" placeholder=\"Full Name\" required minLength=\"4\"\r\n                    value={fullname} onChange={handleFormData} />\r\n                <input type=\"text\" autoComplete=\"off\" required minLength=\"4\"\r\n                    name=\"username\" placeholder=\"Username\"\r\n                    value={username} onChange={handleFormData} />\r\n                <input type=\"password\" name=\"password\" required minLength=\"4\"\r\n                    placeholder=\"Password\" value={password} onChange={handleFormData} />\r\n                <br />\r\n                <button className=\"btn blue insta-btn\">\r\n                    Sign Up\r\n                </button>\r\n            </form>\r\n            <div className=\"card card-login signup-card\">\r\n                Have an account?  <Link className=\"blue-text\" to=\"/Login\"> Log in</Link>\r\n            </div>\r\n            <div className=\"card card-login signup-card app-card\">\r\n                <div> Get the app </div><br />\r\n                <div>\r\n                    <button className=\"btn black\">\r\n                        <i className=\"fab fa-google-play\"> </i> Google Play\r\n                    </button>\r\n                    {\r\n                        isMobile ? <span><br /><br /></span> : <span>  </span>\r\n                    }\r\n                    <button className=\"btn black\">\r\n                        <i className=\"fab fa-app-store\"> </i> App Store<i className=\"text-transparent\">ss</i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Signup;","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./smallComponents.css\";\r\n\r\nconst Comments = () => {\r\n\r\n    //postId is recieved as a prop from Link\r\n    const { postId } = useParams();\r\n    const history = useHistory();\r\n    // comments is local state that store all the comments\r\n    const [comments, setComments] = useState(null);\r\n    // comment is a local state that store single comment posted by user\r\n    const [comment, setComment] = useState(\"\");\r\n    // update is used as a state to trigger useEffect whenever there is some new data to be fetch..\r\n    const [update, setUpdate] = useState(false);\r\n    // Destructuring of logged user state into dp, username constants to use later \r\n    const { dp, username } = useSelector(state => state.loggedUser);\r\n\r\n    useEffect(() => {\r\n        // Fetch all comments on selected post from database\r\n        fetch(`/${postId}/comments`, {\r\n            method: 'get',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(result => {\r\n                if (!result.error) {\r\n                    // set all received comments from response to comments state\r\n                    setComments(result.comments.comments);\r\n                }\r\n            })\r\n            .catch(er => console.log(er))\r\n        //eslint-disable-next-line\r\n    }, [update]);\r\n\r\n    // post comment function..\r\n    const postcomment = e => {\r\n        e.preventDefault();\r\n        fetch(\"/postcomment\", {\r\n            method: \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({ postId, comment })\r\n        })\r\n            .then(data => data.json())\r\n            //we will trigger the useEffect to run again to fetch new data\r\n            .then(data => setUpdate(prev => !prev))\r\n            .catch(er => console.log(er));\r\n        // reset the state to empty\r\n        setComment(\"\");\r\n    }\r\n\r\n    // controlled input form\r\n    const handleComment = e => {\r\n        const value = e.target.value;\r\n        setComment(value);\r\n    }\r\n    return (\r\n        <div className=\"card card-home comment-card\">\r\n            {\r\n                comments && (\r\n                    <div className=\"mainDiv\">\r\n                        {/* Top part with a back button, Title and send message icon */}\r\n                        <div className=\"post-top-part\">\r\n                            <i onClick={history.goBack} style={{ marginTop: '0.4rem' }} className=\"fas fa-chevron-left fa-2x\"></i>\r\n                            <i style={{ marginLeft: 'auto' }} className=\"fa-2x\">Comments</i>\r\n                            <i style={{ marginLeft: 'auto' }} className=\"fab fa-telegram-plane fa-2x\"></i>\r\n                        </div>\r\n                        <hr />\r\n                        {/*  Below is the list of all the comments on particular post */}\r\n                        <div className=\"commentsDiv\">\r\n                            {\r\n                                comments.map(each => {\r\n                                    // using random to generate a random key for each comment\r\n                                    return <div key={each._id} className=\"post-top-part post-comments\" style={{ padding: '5px' }}>\r\n                                        <Link to={`/user/${each.by.username}`} >\r\n                                            <img style={{ marginTop: '-5px', marginRight: '-5px' }} className=\"post-profile-pic\" width=\"35\" height=\"35\" src={each.by.dp || require('../../images/profile-pic.jpg')} alt=\"profile pic\" />\r\n                                        </Link>\r\n                                        <h6 className=\"post-comment-username\"><Link to={`/user/${each.by.username}`} ><strong>{each.by.username}</strong></Link></h6>\r\n                                        <h6 className=\"comment\">{each.comment} </h6>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div className=\"post-top-part post-comments\" style={{ position: 'absolute', bottom: 10 }}>\r\n                            <Link to={`/user/${username}`} ><img className=\"post-profile-pic newCommentImg\" width=\"35\" height=\"35\" src={dp || require('../../images/profile-pic.jpg')} alt=\"profile pic\" /></Link>\r\n                            <form className=\"comment-add\" onSubmit={postcomment}>\r\n                                <input className=\"comment-add\" placeholder=\"Add a comment\"\r\n                                    type=\"text\" name=\"comment\" value={comment} onChange={handleComment} autoComplete=\"off\" spellCheck={false} />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comments;","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./smallComponents.css\";\r\n\r\nconst LikesFollowingFollowers = () => {\r\n\r\n    const history = useHistory();\r\n    // postId, userId and task are props recievd from Link\r\n    const { postId, userId, task } = useParams();\r\n    //  local state to store likes, followrs or following data respectively\r\n    const [data, setData] = useState(null);\r\n    // getting logged user info from state\r\n    const loggedUser = useSelector(state => state.loggedUser);\r\n    // state to know whether user is logged in or not.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    // follow state to triger useEffect to fetch new data\r\n    const [follow, setFollow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        //  if we recieve postId in Link then run first fetch else other for task => following or followers \r\n        fetch((postId) ? `/${postId}/likes` : `/followersOrFollowings/${userId}/${task}`, {\r\n            method: 'get',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(result => {\r\n                // if we recieve likes key in response object\r\n                if (result.likes) {\r\n                    setData(result.likes.likes);\r\n                } else if (result.followers) {    // else if object returns followers else followings\r\n                    setData(result.followers.followers);\r\n                } else {\r\n                    setData(result.following.following);\r\n                }\r\n            })\r\n            .catch(er => console.log(er))\r\n        //eslint-disable-next-line\r\n    }, [follow])\r\n\r\n    // whenver follow or unfollow button is clicked, handlefollow handles the request\r\n    const handleFollow = (username) => {\r\n        fetch(`/user/${username}/follow`, {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            }\r\n        })\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                if (!result.error) {\r\n                    // trigger the useEffect to fetch new data\r\n                    setFollow(prev => !prev);\r\n                }\r\n            })\r\n            .catch(er => console.log(er))\r\n    }\r\n\r\n    return <div className=\"home card card-home lff-card\">\r\n        {\r\n            isAuth && data && (\r\n                <div>\r\n                    <div className=\"post-top-part\">\r\n                        {/* Top header part with back btn and respective heading */}\r\n                        <i onClick={history.goBack} style={{ marginTop: '0.4rem' }} className=\"fas fa-chevron-left fa-2x\"></i>\r\n                        <i style={{ marginLeft: 'auto' }} className=\"fa-2x\">{(postId) ? \"Likes\" : task}</i>\r\n                        <i style={{ marginLeft: 'auto' }}>   </i>\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"llf-DataDiv\">\r\n                        {\r\n                            data.map(each => {\r\n                                // using random to generate a random key for each comment\r\n                                return <div key={each._id} className=\"post-top-part post-comments\" style={{ margin: '1rem 0' }}>\r\n                                    <Link to={`/user/${each.username}`} >\r\n                                        <img className=\"llf-img post-profile-pic\" width=\"50\" height=\"50\" src={each.dp || require('../../images/profile-pic.jpg')} alt=\".\" />\r\n                                    </Link>\r\n                                    {/* username and full name of user in the list */}\r\n                                    <Link to={`/user/${each.username}`} ><div className=\"lff-userDetails\">\r\n                                        <h6 style={{ paddingBottom: '0.2rem' }} className=\"post-comment-username\"><strong>{each.username}</strong></h6>\r\n                                        <h6 className=\"post-comment-username\">{each.fullname}</h6>\r\n                                    </div></Link>\r\n                                    {\r\n                                        // if we are already following the user then grey colored unfollow btn else blue follow\r\n                                        (each._id !== loggedUser._id) && (each.followers.find(id => id === loggedUser._id) ?\r\n                                            < div onClick={(e) => handleFollow(each.username)} className=\"btn grey lff-followBtn\"><strong className=\"white-text\">Unfollow</strong></div>\r\n                                            :\r\n                                            < div onClick={(e) => handleFollow(each.username)} className=\"btn blue lff-followBtn\"><strong className=\"white-text\">Follow</strong></div>)\r\n                                    }\r\n                                </div>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default LikesFollowingFollowers;","import React, { useState } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { set_loggedUser } from \"../actions\";\r\nimport \"./smallComponents.css\";\r\n\r\nconst EditProfile = () => {\r\n\r\n    const history = useHistory();\r\n    const dispactch = useDispatch();\r\n    // getting logged user info from state\r\n    const loggedUser = useSelector(state => state.loggedUser);\r\n    // state to know whether user is logged in or not.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n\r\n    // local state to set data for user inputs in form\r\n    const [data, setData] = useState({\r\n        fullname: loggedUser.fullname,\r\n        username: loggedUser.username,\r\n        email: loggedUser.email\r\n    });\r\n\r\n    // controlled from input\r\n    const handleData = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        setData(prev => { return { ...prev, [name]: value } });\r\n    }\r\n\r\n    // on clicking done button will trigger this function that will handle form submission\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        fetch(`/updateUser`, {\r\n            method: 'post',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n            },\r\n            body: JSON.stringify({ id: loggedUser._id, data })\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(result => {\r\n                if (!result.error) {\r\n                    dispactch(set_loggedUser(result.user));\r\n                    history.goBack();\r\n                }\r\n            })\r\n            .catch(er => console.log(er))\r\n    }\r\n\r\n    // Destructuring data into required variables\r\n    const { fullname, username, email } = data;\r\n\r\n    return <div className=\"home card card-home\" style={{ minHeight: '65vh' }}>\r\n        {\r\n            isAuth && (\r\n                <div>\r\n                    <form onSubmit={handleSubmit} method=\"post\">\r\n                        <div className=\"post-top-part\">\r\n                            <i onClick={history.goBack} className=\"ep-cancelBtn fas\">Cancel</i>\r\n                            <i className=\"fas ep-headerTitle\">Edit Profile</i>\r\n                            <i onClick={handleSubmit} className=\"blue-text text-darken-2 fas ep-doneBtn\">Done</i>\r\n                        </div>\r\n                        <hr />\r\n                        <div>\r\n                            <img style={{ marginLeft: '34%' }} className=\"profile-img\" src={loggedUser.dp || require('../../images/profile-pic.jpg')} alt=\"profile-img\" />\r\n                        </div>\r\n                        <div style={{ marginLeft: '34%' }}>\r\n                            <strong><Link to=\"/updateProfilePhoto\" className=\"blue-text text-darken-2\">Change Profile Photo</Link></strong>\r\n                        </div>\r\n                        <div style={{ marginTop: '1rem' }}>\r\n                            <div className=\"row\">\r\n                                <div className=\"ep-labelDiv col\">Name</div>\r\n                                <input className=\"col ep-input\" type=\"text\" spellCheck=\"false\" autoComplete=\"off\" id=\"fullname\" name=\"fullname\" placeholder=\"Name\" value={fullname} onChange={handleData} />\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col ep-labelDiv\">Username</div>\r\n                                <input className=\"col ep-input\" type=\"text\" spellCheck=\"false\" autoComplete=\"off\" id=\"username\" name=\"username\" placeholder=\"Username\" value={username} onChange={handleData} />\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <div className=\"col ep-labelDiv\">Email</div>\r\n                                <input className=\"col ep-input\" type=\"email\" spellCheck=\"false\" autoComplete=\"off\" id=\"email\" name=\"email\" placeholder=\"Email\" value={email} onChange={handleData} />\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default EditProfile;","import React, { useState, useEffect } from \"react\";\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { set_loggedUser, update_data } from \"../actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./smallComponents.css\";\r\n\r\nconst ProfilePhoto = () => {\r\n\r\n    const dispactch = useDispatch();\r\n    const history = useHistory();\r\n    // getting logged user info from state\r\n    const loggedUser = useSelector(state => state.loggedUser);\r\n    // state to know whether user is logged in or not.\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    // Local state to store selected file and display it \r\n    const [file, setFile] = useState(null)\r\n    //  local state to trigger useEffect to send/upload image to server\r\n    const [send, setSend] = useState(null);\r\n    // state to store image/selected file\r\n    const [image, setImage] = useState(null);\r\n    // ReactCrop component's crop state\r\n    const [crop, setCrop] = useState({ x: 0, y: 0, width: 100, aspect: 1 / 1 });\r\n\r\n    //  ReactCreate provided function to t cropped image after transformation\r\n    function getCroppedImg(image, crop) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height,\r\n        );\r\n        return canvas.toDataURL('image/png');\r\n    }\r\n\r\n    // controlled form to handle change in file input\r\n    const onChangeHandler = event => {\r\n        const url = event.target.files[0];\r\n        if (url) {\r\n            setFile(URL.createObjectURL(url));\r\n        } else {\r\n            setFile(null);\r\n        }\r\n\r\n    }\r\n\r\n    // handle actual upload of image to serve\r\n    const handleUpload = e => {\r\n        const data = new FormData();\r\n        data.append(\"file\", getCroppedImg(image, crop));\r\n        data.append(\"upload_preset\", `${process.env.REACT_APP_upload_preset}`);\r\n        data.append(\"cloud_name\", `${process.env.REACT_APP_cloud_name}`);\r\n        fetch(`${process.env.REACT_APP_IMAGE_API}`, {\r\n            method: \"post\",\r\n            body: data\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // trigger the useEffect with file url as state\r\n                setSend(data.url);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        // if send is true or has value then execute block\r\n        if (send) {\r\n            fetch('/updateProfilePhoto', {\r\n                method: \"put\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n                },\r\n                body: JSON.stringify({\r\n                    dp: send,\r\n                    username: loggedUser.username\r\n                })\r\n            })\r\n                .then(resp => resp.json())\r\n                .then(result => {\r\n                    // set new user data to the redux logeduser state\r\n                    dispactch(set_loggedUser(result.user));\r\n                    dispactch(update_data()); // set state to trigger use effects where data needs to be changed in other components\r\n                    history.goBack();   //goback to previous pae\r\n                })\r\n                .catch(er => console.log(er))\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [send])\r\n\r\n    return (\r\n        <>\r\n            {  // here only shows the form and image data based on file selected..\r\n                isAuth && <div className=\"card home card-home\">\r\n                    <div>\r\n\r\n                        <div>\r\n                            <label htmlFor=\"file-input\" className=\"btn btn-large blue pp-selectBtn\">Select</label>\r\n                            {file && <span style={{ marginLeft: '40%' }} onClick={handleUpload} className=\"btn btn-large blue pp-selectBtn\">Upload</span>}\r\n                        </div>\r\n\r\n                        <input style={{ \"display\": \"none\" }} id=\"file-input\" type=\"file\" accept=\"image/png, image/jpeg\" files={file} onChange={onChangeHandler} />\r\n                    </div>\r\n                    {\r\n                        file && <div >\r\n                            <ReactCrop onImageLoaded={setImage} src={file} crop={crop} keepSelection circularCrop onChange={setCrop} />\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfilePhoto;","import React, { useEffect } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { set_islogged, unset_islogged, set_loggedUser, unset_loggedUser } from \"../components/actions\";\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from '../components/screens/Home';\r\nimport Profile from '../components/screens/Profile';\r\nimport Login from '../components/screens/Login';\r\nimport Signup from '../components/screens/Signup';\r\nimport Comments from './smallComponents/Comments';\r\nimport LikesFollowingFollowers from './smallComponents/LikesFollowingFollowers';\r\nimport EditProfile from './smallComponents/EditProfile';\r\nimport ProfilePhoto from './smallComponents/ProfilePhoto';\r\n\r\n\r\nconst Routing = () => {\r\n    const isAuth = useSelector(state => state.isLogged);\r\n    const isUpdate = useSelector(state => state.isUpdate);\r\n    const dispatch = useDispatch();\r\n    // first thing that will run and identify if user has a session saved or not..\r\n    useEffect(() => {\r\n        //using unstable batch updates so that the setstate functions dont trigger useEffect again and again\r\n        ReactDOM.unstable_batchedUpdates(() => {\r\n            fetch(\"/\", {\r\n                method: \"post\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"authorization\": \"Bearer \" + localStorage.getItem('jwt')\r\n                }\r\n            })\r\n                .then(data => data.json())\r\n                .then(data => {\r\n                    if (data.isLogged) {\r\n                        // setting user data to set_isloggedUser state\r\n                        dispatch(set_loggedUser(data.user))\r\n                        // setting state to true for isLogged state using set_islogged action dispatch\r\n                        dispatch(set_islogged())\r\n                    }\r\n                    if (data.error) {\r\n                        // unset the states to false or null\r\n                        dispatch(unset_loggedUser())\r\n                        dispatch(unset_islogged())\r\n                    }\r\n                }).catch(er => console.log(er));\r\n        })\r\n        // eslint-disable-next-line\r\n    }, [isUpdate]);\r\n    return (\r\n\r\n        < Switch >\r\n            {\r\n                // all the routes except signup route, when user is not logged in, will redirect to login route.\r\n                // When the user is logged in then all the inactive routes will redirect to home route.\r\n                isAuth && <Route path=\"/user/:username\" >\r\n                    <Profile />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route exact path=\"/\" >\r\n                    <Home />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route exact path=\"/myCollection/:postId\" >\r\n                    <Home />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route exact path=\"/updateProfilePhoto\" >\r\n                    <ProfilePhoto />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route path=\"/:postId/comments\" >\r\n                    <Comments />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route path=\"/:postId/likes\" >\r\n                    <LikesFollowingFollowers />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route path=\"/profile/edit\" >\r\n                    <EditProfile />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route path=\"/followering/:userId/:task\" >\r\n                    <LikesFollowingFollowers />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route path=\"/:id/:postId\" >\r\n                    <Home />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth && <Route>\r\n                    <Home />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth === false && <Route path=\"/signup\">\r\n                    <Signup />\r\n                </Route>\r\n            }\r\n            {\r\n                isAuth === false && <Route>\r\n                    <Login />\r\n                </Route>\r\n            }\r\n        </Switch >\r\n\r\n    )\r\n}\r\n\r\nexport default Routing;","import React from 'react';\nimport Header from \"./components/Header\"\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { createStore } from \"redux\";\nimport allReducers from \"./components/reducers\";\nimport { Provider } from 'react-redux';\nimport Routing from \"./components/Routing\";\n\n\n// Redux store.\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Header />\n        <Routing />\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}